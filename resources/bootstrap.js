/**
 * @fileoverview Upsource client-side application entry point.
 * @author igor.alexeenko@jetbrans.com (Igor Alexeenko)
 */

(function () {
    // todo(igor.alexeenko): Temporary measure.
    var ring = window.ring2;

    /**
     * @param {string} path
     * @param {string} query
     */
    function navigateHistory(path, query) {
        window.history.replaceState(null, null, window.location.protocol + '//' + window.location.host + path + query);
    }

    /**
     * Returns URL parameters.
     * @param {string} uri
     * @return {Object}
     */
    var parseURI = (function () {
        var splitRegExp = new RegExp(
            '^' +
            '(?:' +
            '([^:/?#.]+)' +                         // protocol - ignore special characters
                                                    // used by other URL parts such as :,
                                                    // ?, /, #, and .
            ':)?' +
            '(?://' +
            '(?:([^/?#]*)@)?' +                     // userInfo
            '([\\w\\d\\-\\u0100-\\uffff.%]*)' +     // hostname - restrict to letters,
                                                    // digits, dashes, dots, percent
                                                    // escapes, and unicode characters.
            '(?::([0-9]+))?' +                      // port
            ')?' +
            '([^?#]+)?' +                           // path
            '(?:\\?([^#]*))?' +                     // query
            '(?:#(.*))?' +                          // fragment
            '$');

        return function (uri) {
            var split;
            split = uri.match(splitRegExp);
            return {
                'protocol': split[1] || '',
                'user_info': split[2] || '',
                'hostname': split[3] || '',
                'port': split[4] || '',
                'path': split[5] || '',
                'query': split[6] || '',
                'fragment': split[7] || ''
            }
        };
    })();

    /**
     * Takes an {@link Object} generated by a {@code parseURI} and returns a request query from it.
     * @param {Object} parsedState
     * @return {string}
     */
    function getQuery(parsedState) {
        return parsedState['query'] ? '?' + parsedState['query'] : '';
    }

    /**
     * Takes an {@link Object} generated by a {@code parseURI} and returns a path parameter from it.
     * @param {Object} parsedState
     * @return {string}
     */
    function getPath(parsedState) {
        var path = parsedState['fragment'] || parsedState['path'] || '';
        if (path.length == 0 || path.indexOf('/') != 0) {
            path = '/' + path;
        }

        return path;
    }

    /**
     * Detects if URL hash is a part of an address and if so redirects there.
     * @param {Object} state
     */
    var normalizeUrl = function(state) {
        var parsedState, query, path, fragment;

        parsedState = state ? parseURI(state) : parseURI(window.location.href);

        if (!state) {
            if (!parsedState['path'] || parsedState['path'] == '/') {
                path = getPath(parsedState);
                query = getQuery(parsedState);
                navigateHistory(path, query);
            }
        } else { // was redirected, restore state
            // Special handling case for /monitoring URL
            if (parsedState['path'].indexOf('/monitoring') == 0) {
                path = parsedState['path'];
                query = getQuery(parsedState);
                fragment = parsedState['fragment'] ? '#' + parsedState['fragment'] : '';
                window.location.assign(window.location.protocol + '//' + window.location.host + path + query + fragment);
            }

            path = getPath(parsedState);
            query = getQuery(parsedState);
            navigateHistory(path, query);
        }
    };

    /**
     * @const
     * @type {number}
     */
    var AUTH_ATTEMPTS_COUNT = 3;

    /**
     * @enum {string}
     */
    var MessageType = {
        AUTH: 'auth',
        COOKIES: 'cookies',
        HISTORY: 'history'
    };

    /**
     * @param {Array.<string>} scripts
     * @param {string} staticUrl
     * @param {string} hubUrl
     * @param {string} hubId
     * @param {string} upsourceId
     * @param {string} upsourceUrl
     * @param {string} vcsSettingsId
     * @param {string} youTrackIds
     * @constructor
     */
    var Application = function(scripts, staticUrl, hubUrl, hubId, upsourceId, upsourceUrl, vcsSettingsId, youTrackIds) {
        if (!Modernizr.cookies) {
            this.showFailureMessage(MessageType.COOKIES);
            return;
        }

        if (!Modernizr.history) {
            this.showFailureMessage(MessageType.HISTORY);
            return;
        }

        /**
         * @type {boolean}
         * @private
         */
        this.authEnabled_ = hubUrl != null && hubUrl != '';

        /**
         * @type {string}
         * @private
         */
        this.upsourceUrl_ = upsourceUrl;

        var scopes = [upsourceId, hubId];

        if (vcsSettingsId && vcsSettingsId.length > 0) {
            scopes.push(vcsSettingsId);
        }

        if (youTrackIds && youTrackIds.length > 0) {
            scopes = scopes.concat(youTrackIds.split(","));
        }

        this.authorize(upsourceId, upsourceUrl, hubUrl, scopes).then(function(state) {
            normalizeUrl(state);
            this.loadScripts_(scripts, staticUrl);
        }.bind(this), this.onAuthFailure_);
    };

    /**
     * @param {Array.<string>} scripts
     * @param {string} staticUrl
     * @param {string} hubUrl
     * @param {string} hubId
     * @param {string} upsourceId
     * @param {string} upsourceUrl
     * @param {string} vcsSettingsId
     * @param {string} youTrackIds
     * @static
     * @return {Application}
     */
    Application.bootstrap = function(scripts, staticUrl, hubUrl, hubId, upsourceId, upsourceUrl, vcsSettingsId, youTrackIds) {
        window.app = new Application(scripts, staticUrl, hubUrl, hubId, upsourceId, upsourceUrl, vcsSettingsId, youTrackIds);
    };

    /**
     * @param {Array.<string>} scripts
     * @param {string} staticUrl
     * @private
     */
    Application.prototype.loadScripts_ = function(scripts, staticUrl) {
        // Feature detection
        var documentElement = $('html');

        /*@cc_on
         documentElement.addClass('ua-ie');
         @*/

        // Mobile detection taken from CodeMirror
        var ios = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent);
        var mobile = ios || /Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent);

        if (!mobile) {
            documentElement.addClass('no-touch');
        }

        // Start the app
        Modernizr.load({
            load: scripts.concat([staticUrl + '/frontend/frontend.nocache.js']),
            complete: function () {
                // NOP
            }
        });
    };

    /**
     * @param {Element} container
     * @param {Object=} props
     * @param {Auth=} auth
     * @return {ReactComponent}
     */
    Application.prototype.initHeader = function(container, props, auth) {
        props = props || {};
        props.logo = 'upsource';
        props.helpLink = 'https://www.jetbrains.com/upsource/help/?version=1.0';
        props.rootUrl = this.upsourceUrl_;

        /**
         * @type {ReactComponent}
         * @private
         */
        this.header_ = React.renderComponent(new ring.Header(props), container);
        this.header_.refs['help'].setTitle('Help');

        // Settings icon is optional
        if (this.header_.refs['settings']) {
            this.header_.refs['settings'].setTitle('Administration');
        }

        if (typeof auth !== 'undefined') {
            ring.Header.HeaderHelper.setServicesList(this.header_, auth);
            ring.Header.HeaderHelper.setUserMenu(this.header_, auth);
        }

        return this.header_;
    };

    /**
     * @return {ReactComponent}
     */
    Application.prototype.getHeader = function() {
        return this.header_;
    };

    /**
     * @param {Element} container
     * @param {string} versionString
     * @param {string} updateString
     * @return {ReactComponent}
     */
    Application.prototype.initFooter = function(container, versionString, updateString) {
        return React.renderComponent(new ring.Footer({
            className: 'ring-footer_floating',
            left: [
                [{ url: 'http://www.jetbrains.com/upsource', label: 'Upsource' }, ' by JetBrains'],
                versionString + updateString
            ],
            center: [
                { copyright: 2000, label: ' JetBrains. All rights reserved.' }
            ],
            right: [
                { url: 'mailto:upsource-support@jetbrains.com', label: 'Feedback' },
                { url: 'https://www.jetbrains.com/upsource/help/?version=1.0', label: 'Help' }
            ]
        }), container);
    };

    /**
     * @param {string} upsourceId
     * @param {string} upsourceUrl
     * @param {string} hubUrl
     * @param {Array.<string>} scopes
     * @return {Promise}
     */
    Application.prototype.authorize = function(upsourceId, upsourceUrl, hubUrl, scopes) {
        if (!this.auth_ && this.authEnabled_) {
            this.auth_ = new ring.Auth({
                client_id: upsourceId,
                redirect_uri: upsourceUrl,
                serverUri: hubUrl,
                scope: scopes,
                refresh: true
            });

            return this.auth_.init();
        }

        return null;
    };

    /**
     * @param {Object} e Error
     * @private
     */
    Application.prototype.onAuthFailure_ = function(e) {
        if (e !== null && !e.authRedirect) {
            var authAttempts = $.cookie('authAttempts') || 0;

            if (authAttempts < AUTH_ATTEMPTS_COUNT) {
                $.cookie('authAttempts', ++authAttempts);
                window.location.reload();
            } else {
                $.removeCookie('authAttempts');
                this.showFailureMessage('auth');
            }
        }
    };

    /**
     * @return {Auth}
     */
    Application.prototype.getAuth = function() {
        return this.auth_;
    };

    /**
     * @param {string} type
     */
    Application.prototype.showFailureMessage = function(type) {
        $('.index-spinner').remove();
        $('.index-failure_' + type).removeClass('hidden');
    };

    /**
     * @return {boolean}
     */
    Application.prototype.isAuthEnabled = function() {
        return this.authEnabled_;
    };

    /**
     * @param {Element} element
     */
    Application.prototype.setPathBarElement = function(element) {
        /**
         * @type {Element}
         * @private
         */
        this.pathBarElement_ = element;
    };

    /**
     * @return {Element}
     */
    Application.prototype.getPathBarElement = function() {
        return this.pathBarElement_;
    };

    window.bootstrap = Application.bootstrap;
    window.parseURI = parseURI;
})();

